#macro( getter $field )$utils.getGetterName($field)#end
#macro( setter $field )$utils.getSetterName($field)#end
#macro( fu $var )$utils.firstUpper($var)#end
#macro( isString $var )$utils.isString($var)#end
#macro( fieldDecl $var )$utils.fieldDeclaration($var)#end
#macro( type $var )$utils.typeName($var)#end
\#include "${struct.name}.h"


#if( $namespace != '' )
namespace $namespace
{


#end
#define MAX_REGS(_X_) ( sizeof(_X_) / sizeof(_X_[0]) )



${struct.name}::${struct.name}(sqlite::Database *db, sqlite::Statement *stmt)#set( $i = 0 )#foreach( $field in $struct.fields )
#if( not $field.list and not $field.primitive )
#if( $i == 0 )
 : ${field.name}(db)#else
, ${field.name}(db)#end
#set($i = $i + 1)
#end
#end

{
	this->db = db;

	stmt->getColumn(0, &id);
#set( $i = 1 )
#foreach( $field in $struct.fields )
#if( not $field.list )
#if( not $field.primitive )
	sqlite3_int64 ${field.name}ID = stmt->getColumnAsInt64($i);
	if (${field.name}ID > 0)
		$field.name = #type($field)::query(db, ${field.name}ID);
	else
		${field.name}.id = -1;
#elseif( $field.string )
	stmt->getColumn($i, &$field.name);
#elseif( $field.type.name() == 'Boolean' )
	$field.name = (stmt->getColumnAsInt($i) != 0);
#elseif( $field.type.name() == 'Int32' )
	$field.name = stmt->getColumnAsInt($i);
#elseif( $field.type.name() == 'DateTime' )
	$field.name = (#type($field)) stmt->getColumnAsInt64($i);
#else
	$field.name = (#type($field)) stmt->getColumnAsInt($i);
#end
#set( $i = $i + 1 )
#end
#end
#if( $utils.hasList($struct) )

#foreach( $field in $struct.fields )
#if( $field.list )
	${field.name}Initialized = false;
#end
#end
#end
}


${struct.name}::${struct.name}(sqlite::Database *db)#set( $i = 0 )#foreach( $field in $struct.fields )
#if( not $field.list and not $field.primitive )
#if( $i == 0 )
 : ${field.name}(db)#else
, ${field.name}(db)#end
#set($i = $i + 1)
#end
#end

{
	this->db = db;
	
	id = -1;
#foreach( $field in $struct.fields )
#if( $field.list )
	${field.name}Initialized = true;
#elseif( not $field.primitive )
#elseif( $field.string )
	${field.name} = _T("");
#elseif( $field.array > 0 )
	memset(${field.name}, 0, ${field.array} * sizeof(#type($field))); 
#elseif( $field.type.name() == 'Boolean' )
	$field.name = false;
#else
	$field.name = 0;
#end
#end
}


${struct.name}::~${struct.name}()
{
}


#foreach( $field in $struct.fields )
#if ( $field.list )
std::vector<#type($field)> & ${struct.name}::${field.name}()
{
	if (!${field.name}Initialized)
	{
		sqlite::Statement stmt = db->prepare(
			_T("SELECT #type($field).* ")
			_T("FROM ${struct.name} ")
				_T("JOIN ${struct.name}_#type($field) ON (${struct.name}.id == ${struct.name}_#type($field).${struct.name}) ")
				_T("JOIN #type($field) ON (${struct.name}_#type($field).#type($field) == #type($field).id) ")
			_T("WHERE ${struct.name}.id = ? ")
			_T("ORDER BY #type($field).id")
		);

		stmt.bind(1, id);

		while(stmt.step())
			${field.name}List.push_back(#type($field)(db, &stmt));

		${field.name}Initialized = true;
	}

	return ${field.name}List;
}


#end
#end
void ${struct.name}::store()
{
	store(db, this);
}


void ${struct.name}::remove()
{
	delete(db, this);
}



void ${struct.name}::createTable(sqlite::Database *db)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));

	db->execute(
		_T("CREATE TABLE IF NOT EXISTS ${struct.name} (")
			_T("id INTEGER PRIMARY KEY#foreach( $field in $struct.fields )
#if( not $field.list )
#if( not $field.primitive )
, ")
			_T("${field.name}ID INTEGER#elseif( $field.string )
, ")
			_T("$field.name VARCHAR#else
, ")
			_T("$field.name INTEGER#end
#end
#end
")
		_T(")")
	);
#foreach( $field in $struct.fields )
#if( $field.list )
	
	db->execute(
		_T("CREATE TABLE IF NOT EXISTS ${struct.name}_#type($field) (")
			_T("${struct.name} INTEGER, ")
			_T("#type($field) INTEGER, ")
			_T("PRIMARY KEY (${struct.name}, #type($field)) ")
		_T(")")
	);
#end
#end
#foreach( $index in $struct.indexes )

	db->execute(_T("CREATE INDEX IF NOT EXISTS INDEX_${struct.name}#foreach( $field in $index.fields )_$field#end ON ${struct.name}(#set( $i = 0 )#foreach( $field in $index.fields )
#if( $i > 0), #end${field}#set( $i = $i + 1 )
#end)"));
#end
}


void ${struct.name}::dropTable(sqlite::Database *db)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));
#foreach( $index in $struct.indexes )

	db->execute(_T("DROP INDEX IF EXISTS INDEX_${struct.name}#foreach( $f in $index.fields )_$f#end"));
#end
#foreach( $field in $struct.fields )
#if( $field.list )
	
	db->execute(_T("DROP TABLE IF EXISTS ${struct.name}_#type($field)"));
#end
#end

	db->execute(_T("DROP TABLE IF EXISTS ${struct.name}"));
}


${struct.name} ${struct.name}::query(sqlite::Database *db, sqlite3_int64 id)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));

	sqlite::Statement stmt = db->prepare(_T("SELECT * FROM ${struct.name} WHERE id = ?"));

	stmt.bind(1, id);

	if (!stmt.step())
		throw sqlite::DatabaseException(SQLITE_NOTFOUND, _T("${struct.name} not found"));

	return ${struct.name}(db, &stmt);
}	


std::vector<$struct.name> ${struct.name}::queryAll(sqlite::Database *db)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));

	std::vector<$struct.name> ret;

	sqlite::Statement stmt = db->prepare(_T("SELECT * FROM $struct.name ORDER BY id"));
	while (stmt.step())
		ret.push_back(${struct.name}(db, &stmt));

	return ret;
}


#if( $utils.hasNotList($struct) ) 
std::vector<$struct.name> ${struct.name}::queryAll(sqlite::Database *db#foreach( $field in $struct.fields )#if ( not $field.list ), #type($field) *p#fu($field.name)#end#end)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));

	std::vector<$struct.name> ret;
	
	std::tstring sql = _T("SELECT * FROM $struct.name ");
	
	bool hasWhere = false;
#foreach( $field in $struct.fields )
#if ( not $field.list )
	if (p#fu($field.name) != NULL)
	{
		sql += ( hasWhere ? _T("AND ") : _T("WHERE ") );
		sql += "$field.name == ? ";
		hasWhere = true;
	}
#end
#end
	
	sql += _T("ORDER BY id");
	
	sqlite::Statement stmt = db->prepare(sql.c_str());
	
	int bind = 1;
#foreach( $field in $struct.fields )
#if( not $field.list )
	if (p#fu($field.name) != NULL)
#if( not $field.primitive )
		stmt.bind(bind++, p#fu($field.name)->id);
#elseif( $field.string )
		stmt.bind(bind++, p#fu($field.name)->c_str());
#elseif( $field.type.name() == 'Boolean' )
		stmt.bind(bind++, *p#fu($field.name) ? 1 : 0);
#elseif( $field.type.name() == 'Int32' )
		stmt.bind(bind++, *p#fu($field.name));
#elseif( $field.type.name() == 'DateTime' )
		stmt.bind(bind++, (sqlite3_int64) *p#fu($field.name));
#else
		stmt.bind(bind++, (int) *p#fu($field.name));
#end
#end
#end
	
	while (stmt.step())
		ret.push_back(${struct.name}(db, &stmt));

	return ret;
}


#end
void ${struct.name}::store(sqlite::Database *db, ${struct.name} *obj)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));

	if (db->isAutoCommitEnabled())
	{
		sqlite::Transaction trans(db);
		sqlite3_int64 id = internalStore(db, obj);
		trans.commit();
		
		obj->id = id;
	}
	else
	{
		obj->id = internalStore(db, obj);
	}
}


sqlite3_int64 ${struct.name}::internalStore(sqlite::Database *db, ${struct.name} *obj)
{
	bool update = (obj->id > 0);
	sqlite3_int64 id;

	{
		sqlite::Statement stmt = db->prepare(_T("INSERT OR REPLACE INTO ${struct.name} VALUES (?#foreach( $field in $struct.fields )#if( not $field.list ), ?#end#end)"));

		if (update)
			stmt.bind(1, obj->id);
#set( $i = 2 )
#foreach( $field in $struct.fields )
#if( not $field.list )
#if( not $field.primitive )
		if (obj->${field.name}.id > 0)
			stmt.bind($i, obj->${field.name}.id);
#elseif( $field.string )
		stmt.bind($i, obj->${field.name}.c_str());
#elseif( $field.type.name() == 'Boolean' )
		stmt.bind($i, obj->$field.name ? 1 : 0);
#elseif( $field.type.name() == 'Int32' )
		stmt.bind($i, obj->$field.name);
#elseif( $field.type.name() == 'DateTime' )
		stmt.bind($i, (sqlite3_int64) obj->$field.name);
#else
		stmt.bind($i, (int) obj->$field.name);
#end
#set( $i = $i + 1 )
#end
#end

		stmt.execute();

		id = db->getLastInsertRowID();
	}
	
	if (update && id != obj->id)
		throw sqlite::DatabaseException(SQLITE_ERROR, "Wrong id");
#foreach( $field in $struct.fields )
#if( $field.list )

	if (obj->${field.name}Initialized) 
	{
		{
			sqlite::Statement stmt = db->prepare(_T("DELETE FROM ${struct.name}_#type($field) WHERE ${struct.name} == ?"));
			stmt.bind(1, id);
			stmt.execute();
		}

		{
			sqlite::Statement stmt = db->prepare(_T("INSERT OR REPLACE INTO ${struct.name}_#type($field) VALUES (?, ?)"));

			for(std::vector<#type($field)>::iterator it = obj->${field.name}List.begin(); it != obj->${field.name}List.end(); it++)
			{
				#type($field) &ref = *it;

				if (ref.id < 0)
					throw sqlite::DatabaseException(SQLITE_ERROR, "#type($field) is not stored");
				
				stmt.reset();
				stmt.bind(1, id);
				stmt.bind(2, ref.id);
				stmt.execute();
			}
		}
	}
#end
#end
	
	return id;
}


void ${struct.name}::remove(sqlite::Database *db, ${struct.name} *obj)
{
	if (db == NULL)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Invalid database"));
	if (obj->id <= 0)
		throw sqlite::DatabaseException(SQLITE_ERROR, _T("Object is not in database"));

	{
		sqlite::Statement stmt = db->prepare(_T("DELETE FROM ${struct.name} WHERE id == ?"));
		stmt.bind(1, obj->id);
		stmt.execute();
	}

	obj->id = -1;
}
#if( $namespace != '' )



}
#end
