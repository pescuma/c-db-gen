#macro( getter $field )$utils.getGetterName($field)#end
#macro( setter $field )$utils.getSetterName($field)#end
#macro( fu $var )$utils.firstUpper($var)#end
#macro( isString $var )$utils.isString($var)#end
#macro( fieldDecl $var )$utils.fieldDeclaration($var)#end
#macro( type $var )$utils.typeName($var)#end
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "${struct.name}Factory"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Public connection As cConnection


Sub CreateTable()
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
    
    connection.Execute _
        "CREATE TABLE IF NOT EXISTS ${struct.name} (" _
            & "id INTEGER PRIMARY KEY#foreach( $field in $struct.fields )
#if( not $field.list )
#if( not $field.primitive )
, " _
            & "${field.name}ID INTEGER#elseif( $field.string )
, " _
            & "$field.name VARCHAR#else
, " _
            & "$field.name INTEGER#end
#end
#end
" _
        & ")"
#foreach( $field in $struct.fields )
#if( $field.list )
    
    connection.Execute _
        "CREATE TABLE IF NOT EXISTS ${struct.name}_#type($field) (" _
            & "${struct.name} INTEGER, " _
            & "#type($field) INTEGER, " _
            & "PRIMARY KEY (${struct.name}, #type($field)) " _
        & ")"
#end
#end
#foreach( $index in $struct.indexes )

    connection.Execute "CREATE INDEX IF NOT EXISTS INDEX_${struct.name}#foreach( $field in $index.fields )_$field#end ON ${struct.name}(#set( $i = 0 )#foreach( $field in $index.fields )
#if( $i > 0), #end${field}#set( $i = $i + 1 )
#end)"
#end
End Sub


Sub DropTable()
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
#foreach( $index in $struct.indexes )
    
    connection.Execute "DROP INDEX IF EXISTS INDEX_${struct.name}#foreach( $f in $index.fields )_$f#end"
#end
#foreach( $field in $struct.fields )
#if( $field.list )
    
    connection.Execute"DROP TABLE IF EXISTS ${struct.name}_#type($field)"
#end
#end
    
    connection.Execute "DROP TABLE IF EXISTS ${struct.name}"
End Sub


Function Query(id as Long) As $struct.name
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
    
    Dim ret As New $struct.name 
    ret.Load connection, connection.OpenRecordset("SELECT * FROM ${struct.name} WHERE id = " & id, True)
    Set Query = ret
End Function


#if( $utils.hasNotList($struct) ) 
Function QueryAll(#foreach( $field in $struct.fields )#if ( not $field.list )Optional $field.name, #end#{end}Optional sortBy As String = "id ASC") As Collection
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
    
    Dim sql as String    
    sql = "SELECT * FROM $struct.name "
    
    Dim hasWhere As Boolean
    hasWhere = false
#foreach( $field in $struct.fields )
#if ( not $field.list )
    If Not IsMissing($field.name) And Not IsEmpty($field.name) Then
        sql = sql & IIf(hasWhere, "AND ", "WHERE ")
#if( not $field.primitive )
        sql = sql & "${field.name}ID == " & ${field.name}.id & " "
#elseif( $field.string )
        If TypeName($field.name) = "DataRange" Then
            sql = sql & "$field.name >= """ & ${utils.convertionFunction($field)}(${field.name}.StartValue) & """ AND $field.name < """ & ${utils.convertionFunction($field)}(${field.name}.EndValue) & """ "
        Else
            sql = sql & "$field.name == """ & ${utils.convertionFunction($field)}($field.name) & """ " 
        End If
#elseif( $field.type.name() == 'Boolean' )
        sql = sql & "$field.name == " & IIf(${utils.convertionFunction($field)}($field.name), 1, 0) & " " 
#elseif( $field.type.name() == 'DateTime' )
        If TypeName($field.name) = "DataRange" Then
            sql = sql & "$field.name >= " & DateDiff("s", #1/1/1970#, ${utils.convertionFunction($field)}(${field.name}.StartValue)) & " AND $field.name < " & DateDiff("s", #1/1/1970#, ${utils.convertionFunction($field)}(${field.name}.EndValue)) & " "
        Else
            sql = sql & "$field.name == " & DateDiff("s", #1/1/1970#, ${utils.convertionFunction($field)}($field.name)) & " " 
        End If
#elseif( $field.type.name() == 'Currency' )
        If TypeName($field.name) = "DataRange" Then
            sql = sql & "$field.name >= " & CLng(${field.name}.StartValue * 100) & " AND $field.name < " & CLng(${field.name}.EndValue * 100) & " "
        Else
            sql = sql & "$field.name == " & CLng($field.name * 100) & " " 
        End If
#else
        If TypeName($field.name) = "DataRange" Then
            sql = sql & "$field.name >= " & ${utils.convertionFunction($field)}(${field.name}.StartValue) & " AND $field.name < " & ${utils.convertionFunction($field)}(${field.name}.EndValue) & " "
        Else
            sql = sql & "$field.name == " & ${utils.convertionFunction($field)}($field.name) & " " 
        End If
#end
        hasWhere = True
    End If
#end
#end
    
    sql = sql & "ORDER BY " & sortBy 
    
    Dim rs As cRecordset
    Set rs = connection.OpenRecordset(sql, True)
    
    Dim ret As New Collection 
    Dim tmp as ${struct.name}
    Do Until rs.EOF
        Set tmp = New ${struct.name}
        tmp.Load connection, rs
        ret.Add tmp
        rs.MoveNext
    Loop
    Set QueryAll = ret
End Function


#else
Function QueryAll() As Collection
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
    
    Dim rs As cRecordset 
    Set rs = connection.OpenRecordset("SELECT * FROM ${struct.name} ORDER BY id ASC", True)
    
    Dim ret As New Collection 
    Dim tmp as ${struct.name}
    Do Until rs.EOF
        Set tmp = New ${struct.name}
        tmp.Load connection, rs
        ret.Add tmp
        rs.MoveNext
    Loop
    Set QueryAll = ret
End Function


#end
Sub Store(obj As ${struct.name})
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
    obj.Connect connection
    obj.Store
End Sub


Sub Remove(obj As ${struct.name})
    If connection Is Nothing Then Err.Raise 1, "${struct.name}Factory", "Invalid connection"
    obj.Connect connection
    obj.Remove
End Sub


