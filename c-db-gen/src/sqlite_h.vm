#macro( getter $field )$utils.getGetterName($field)#end
#macro( setter $field )$utils.getSetterName($field)#end
#macro( fu $var )$utils.firstUpper($var)#end
#macro( isString $var )$utils.isString($var)#end
#macro( fieldDecl $var )$utils.fieldDeclaration($var)#end
#macro( type $var )$utils.typeName($var)#end
#set( $fileDefine = "__${utils.toDefine($struct.name)}_H__" )
#ifndef $fileDefine
# define $fileDefine

\#include <windows.h>
\#include <tchar.h>
#if( $utils.hasDateTime($struct) )
\#include <time.h>
#end
\#include <vector>
#if( $utils.hasString($struct) )
\#include <string>
#end
\#include "SQLite.h"
#if( $utils.hasString($struct) )

namespace std {
typedef basic_string<TCHAR, char_traits<TCHAR>, allocator<TCHAR> > tstring;
}
#end
#if( $utils.hasList($struct) or $utils.hasReference($struct) )

#foreach( $field in $struct.fields )
#if ( $field.list or not $field.primitive )
\#include "#type($field).h"
#end
#end
#end
#if( $namespace != '' )


namespace $namespace
{
#end
#if( $utils.hasFlags($struct) )


#set( $id = 1 )
#foreach( $field in $struct.fields )
#foreach( $flag in $field.flags )
#define ${utils.toDefine($struct.name)}_${utils.toDefine($field.name)}_${utils.toDefine($flag)} $id
#set( $id = 2 * $id )
#end
#end
#end



class $struct.name
{
private:
	sqlite::Database *db;
#if( $utils.hasList($struct) )

#foreach( $field in $struct.fields )
#if( $field.list )
	#fieldDecl($field)List;
	bool ${field.name}Initialized;
#end
#end
#end
	
	static sqlite3_int64 internalStore(sqlite::Database *db, ${struct.name} *obj);
	
public:
	
	sqlite3_int64 id;
#foreach( $field in $struct.fields )
#if ( not $field.list )
	#fieldDecl($field);
#end
#end

	${struct.name}(sqlite::Database *db, sqlite::Statement *stmt);
	${struct.name}(sqlite::Database *db = NULL);
	~${struct.name}();
#if( $utils.hasList($struct) )

#foreach( $field in $struct.fields )
#if ( $field.list )
	std::vector<#type($field)> &${field.name}();
#end
#end
#end
	
	void store();
	void remove();
	
	
	static void createTable(sqlite::Database *db);
	static void dropTable(sqlite::Database *db);
	
	static $struct.name query(sqlite::Database *db, sqlite3_int64 id);
	static std::vector<$struct.name> queryAll(sqlite::Database *db);
#if( $utils.hasNotList($struct) ) 
	static std::vector<$struct.name> queryAll(sqlite::Database *db#foreach( $field in $struct.fields )#if ( not $field.list ), #type($field) *$field.name#end#end);
#end
	
	static void store(sqlite::Database *db, ${struct.name} *obj);
	static void remove(sqlite::Database *db, ${struct.name} *obj);
	
};
#if( $namespace != '' )



}
#end


#endif // $fileDefine
